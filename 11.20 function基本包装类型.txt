concat():数组的拼接。
splice()：使用这种方法的方式则有如下 3种：
	删除：可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。 
	插入：可以向指定位置插入任意数量的项，只需提供 3个参数：起始位置、0（要删除的项数） 和要插入的项。如果要插入多个项，可以再传入第四、第五，以至任意多个项。例如，splice(2,0,"red","green")会从当前数组的位置 2开始插入字符串"red"和"green"。 
	替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起 始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如， splice (2,1,"red","green")会删除当前数组位置 2 的项，然后再从位置 2 开始插入字符串 "red"和"green"。 

函数的定义：
	function  getMax(value1,value2) {
        return value1 >= value2 ? value1 : value2;
    }
	
	函数的模板：
		function  函数名(形参1,形参2) {
            return 返回值。
        }
		
		函数名：用于区分函数，或者通过函数名告诉调用者该函数的功能。
		形参：用于接受外部传入的参数。
			定义形参的时候不需要使用var.
		返回：返回运算的结果。
		
		所有的函数都必须有参数和返回值么？
			不一定：如果函数在执行期间不需要外界传递参数，或者不需要将结果返回给调用者，就可以省略。
	
	函数是不是对象？
		是的！
		
		函数的定义：
			第一种：
				function  函数名(形参1,形参2) {
					return 返回值。
				}
				
			第二种：
				var 函数名 = function (形参1,形参2) {
								return 返回值。
							}
			两种定义函数的方式的区别：
				第一种：函数执行之前，该函数就会被定义。
				第二种：只有当程序运行到该处的时候才会被定义。
							
		函数名能不能重复？
			不能
						
	函数的内部属性：
		在函数内部，有两个特殊的对象： arguments 和 this。  
		类数组：类似数组，以后再看到类数组的时候，你只需要把他当做数组就可以了！！！
		this:this所在的函数被谁调用，this就指向谁。
		caller。这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为 null。

	函数递归：函数自己在函数的内部调用自己。						
		
	局部变量：函数内部定义的变量为局部变量。   函数的参数是局部变量，只有在所在的函数内访问。
	全局变量：局部变量以外的变量都为全局变量。
	
	函数的属性和方法：
		length属性表示函数希望接收的命名参数的个数。 	
		apply()和 call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内 this 对象的值。		
			作用：扩充函数的作用域。
		
		bind()。这个方法会创建一个函数的实例，其 this 值会被绑定到传给 bind()函数的值。 
		
		作用域的最小单元是函数。		
							
	闭包：
		闭包是指有权访问另一个函数作用域中的变量的函数。创建闭包的常见方式，就是在一个函数内部创建另一个函数。

	内存泄漏:在使用的过程中，开辟的内存内有及时释放。
	内存溢出：内存在使用的过程中，内存不足。
						
	注意：
		转型函数和构造函数是不一样的。
			构造函数：使用 new 关键字调用，可以创建对象。
			转型函数：进行数值转换的，是将一种类型转换为另一种基本数据类型。
							
							
							
						
							
							
							