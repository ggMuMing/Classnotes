1、Javascript基本介绍
（1）概念
	JavaScript是一种具有面向对象能力的、解释型的程序设计语言，是基于对象的脚本语言
	JavaScript的设计初衷用于处理服务器端语言负责的一些验证操作
（2）作用
	- 用于实现页面交互
	- 构建服务端的应用程序
（3）Javascript的组成
	<1>ECMAScript：由ECMA-262定义，提供核心语言功能
	- ECMAScript的组成部分：
		语法 类型 语句 关键字 保留字 操作符 对象
	<2>BOM：提供与浏览器交互的方法和接口
	<3>DOM：提供访问和操作网页内容的方法和接口

2、html引入JavaScript方式
（1）内联
（2）引入外部的JS<script type="text/javascript" src="XXXX.js"></script>
（3）行内
script标签的位置：
- 传统做法：
	所有<script>元素都应该放在页面的<head>元素中。
	缺点：浏览器由上到下渲染读取文档，对于那些需要很多Javascript代码的页面来说，
			完全加载页面之前会首先加载大量的JS文件，导致浏览器呈现明显的延迟，而延迟期间浏览器窗口呈现空白
- 现代做法：一般会把全部Javascript医用到<body>元素中页面内容的后面
引入外部JS文件的好处：
- 可维护性：可以在不触及HTML的情况下，几种经历编辑JS代码。
- 可缓存：如果有对各页面都需要使用同一个文件，那么文件只需要下载一次。加快页面加载的速度。
			两个数字，200：重新下载，304已下载好，从缓存中加载
- 适应未来：无需使用注释hack

4、script标签属性
- 延迟脚本defer属性：告知浏览器立即下载js文件，但延迟执行，只适用外部脚本
- 异步脚本async属性：告知浏览器立即下载js文件，但标记谓async的脚本
  并不保证按照指定它们的先后顺序执行。目的是不让页面等待多个脚本
  文件下载和执行，从而异步加载页面其他内容。为此建议异步脚本不要在加载
  期间修改DOM。异步脚本一定会在页面的lord事件前执行
	
5、JavaScript基本概念
（1）基础语法
	- 语法细节
		- 区分大小写：ECMAScript中的一切（变量、函数名、和操作符）都区分大小写
		- 标识符的命名：标识符：变量、函数、属性的名字，或者函数的参数。
						规则：第一个字母必须是一个字母、下划线、或一个美元符号。
						其他字符可以是字母、下划线、美元符号、数字。
（2）关键字保留字
	- 关键字：ECMAScript中一些以特定的含义、并用做专门用途的单词作为关键字。
	- 保留字：还没有赋予特殊含义，但是准备日后使用的单词
	-关键字保留字都不能作为标识符
（3）变量
	- ECMAScript中的变量是松散类型的，可以用来保存任何数据类型的数据。
	- 定义变量：var temp；
	- 未经初始化的变量会保存一个特殊值——undefined。
	- 省略var操作符，从而创建一个全局变量

6、简单数据类型
- ECMAScript中有5种简单数据类型（基本数据类型）：
	undefined  null（空对象）  boolean  number  string
  还有一种复杂数据类型：
	object（对象）  object本质上是由一组无序的键值对组成的。
- 类型检测typeof操作符
	- undefined  如果这个值未定义
	- boolean    如果这个值是布尔值
	- string     如果这个值是字符串
	- number     如果这个值是数值
	- object     如果这个值是对象或null
	- function   如果这个值是函数
（1）undefined类型：
	- undefined类型只有一个值。
		包含undefined值得变量与尚未定义的变量还是不一样的。
		声明过的变量没有赋值，则它的值为undefined；未声明的变量没有值
（2）null类型
	- null类型是第二个只有一个值的数据类型，这个特殊的值是null。
	null值表示一个空对象指针，使用typeof操作符检测null值会返回object
	- 如果定义的变量准备在将来用于保存对象，那么好将该变量初始化null而不是其他值。
	- undefine值是派生自null值的，因此ECMA-262规定对它们的相等性测试要返回true。
（3）boolean类型
	- 该类型只有两个字面值：true 和 false。
	- 这两个值与数字只无关。
	- 对任何类型值调用Boolean函数各，总会返回一个boolean值，数据类型转换规则：
				数据类型		  转化为 true 的值           转换为 false 的值
				boolean					true					 false
				number                非 0 值                  0 或者 NaN
				object                不为 null                   null
				string                非空字符串               “”（空字符）
			   undefine                   /                     undefine	

（4）number类型
- 最小数值保存在 Number.MIN_VALUE，最大数值保存在 Number.MAX_VALUE 中。
	超出 JavaScript 数值范围的值，这个数值将被自动转换成特殊的 Infinity 值。
	具体来说，如果这个数值是负数，则会被转换成-Infinity（负无穷），如果这个数值是正数，则会被转换成 Infinity（正无穷）。
- 无穷的数据不能参与运算：因为无穷是不能参与运算的值。
- 如何判断判断一个数为无穷？
	函数： isFinite() : 判断传入的数据是否在无穷范围之内。判断是否是有穷。
- 对于小数而言，存入数值与取出数值可能不一致，判断浮点时，可以给定判定区间
（5）NaN类型
- 即非数值，是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。
- 任何涉及NaN的操作都会返回NaN，这个特点在多步计算中可能导致问题。其次，NaN与任何值都不相等，包括NaN本身。
	isNaN（）：用于判断一参数是否不是数值。
			alert(isNaN(NaN));     //true
			alert(isNaN(10));      //false（ 10 是一个数值）
			alert(isNaN("10"));    //false（可以被转换成数值 10）
			alert(isNaN("blue"));  //true（不能转换成数值）
			alert(isNaN(true));    //false（可以被转换成数值 1）
（6）string类型
- ECMA中的字符串是不可改变的，字符串一旦创建，它们的值不可改变
- 几乎每个值都有toString（）方法，null和undefined没有这个方法。作用是将值转换为字符串的表现方式返回
- toString（）与String（）函数的区别：
	- toString方法是数据类型自带的函数，所以调用时表现形式为  变量名.toString（）。
	- String函数是JS提供的，可以将任意数据类型转换为字符串的表现形式。值为null则返回null。值为undefined返回undefined
7、数值转换
有三个函数可以把非数值转换为数值：number（）、parseInt（）、parseFloat（）。
Number可以用于任何数据类型，后者用于字符串转换成数值
（1）Number（）函数和转换规则：
	- 如果是boolean值，true和false将分别被转换为1和0
	- 如果是数字值，知识简单的传入和返回
	- 如果是null，返回0
	- 如果是undefined，返回NaN
	- 如果传入的是字符串：
		- 如果字符串中只包含数值类型，则将其转换为响应的数值类型
		- 如果字符串是空的，则将其转换为0
		- 如果字符串中包含除上述格式之外的字符，则将其转换为NaN。
	- 如果传入的是对象：
		先判断对象中是否有 valueOf 函数，如果有 valueOf 函数，则转换 valueOf 函数的返回值。如果没有 valueOf
		函数 则判断该对象是否有 toString 函数，如果有怎转化 toString 函数的返回值。若两个函数都不具备则直接返回NaN。
（2） parseInt()函数的转换规则：
		函数在转换字符串时。它会忽略字符串前面的空格，直至找到第一个非空格字符。
		如果第一个字符不是数字字符或者负号，parseInt()就会返回NaN;
		如果字符串中的第一个字符是数字字符，parseInt()能够识别出各种整数格式。
		parseInt()可以有第二个参数：转换时使用的基数（即多少进制）。 
			例：
					alert(parseInt(‘   123abc’));   ===> 123
					
					parseInt("xxxxx",16) : 以16进制形式解析为10进制。
					parseInt("xxxxx",10) : 以10进制形式解析为10进制。
					parseInt("xxxxx",8) : 以8进制形式解析为10进制。
					parseInt("xxxxx",2) : 以2进制形式解析为10进制。